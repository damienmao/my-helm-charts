@Library('wdcd-mpl@master') _

def jobResult_WebUI=''
def jobResult_Crud=''
def jobResult_Bff=''
def jobResult_Proxy=''

pipeline {
    agent any
    environment {
        environmentName = "E2E4"
    }
    // triggers {
     //   cron('H 11 * * *')
  //  }
    stages {
            stage('Deploy payid-web-ui into E2E4') {
                steps {
                    script {
                        def isStartedByUser = currentBuild.rawBuild.getCause(hudson.model.Cause$UserIdCause) != null
                        def jobBuild = build job: 'payid-web-ui/develop', parameters: [
                         string(name: 'Docker_Image_Build',value: 'true'),
                         string(name: 'Artifactory_Publish',value:'true'),
                         // booleanParam(name: 'Fortify_Scan',value:true),
                         booleanParam(name: 'Email_Notification',value:false),
                         string(name: 'Deploy_E2E4',value:'true')], propagate: false

                        jobResult_WebUI = jobBuild.getResult()
                        if (jobResult_WebUI != 'SUCCESS') {
                            EMAIL_SUBJECT = "Auto Deploy - payid-web-ui Fail to deploy to ..${environmentName} :("
                        } else{
                            EMAIL_SUBJECT = "Auto Deploy - payid-web-ui Successfully build and deploy to ..${environmentName} :)"
                        }
                        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-key', url: 'https://github.service.anz/WDCD/wdcd-platform.git']]]

                        EMAIL_RECIPIENTS="WDCD – NPP Squad <WDCD-NPP@anz.com>"
                        EMAIL_MESSAGE=EMAIL_SUBJECT

                        withCredentials([usernamePassword(credentialsId: 'Email_Notifications', passwordVariable: 'EMAIL_PASSWORD', usernameVariable: 'EMAIL_USERNAME')]) {
                         sh "python common/src/main/resources/email_utility.py 'applicationrelay.anz.com' 25 'WDCD_PLATFORM_DO_NOT_REPLY@anz.com' '${EMAIL_RECIPIENTS}' '${EMAIL_SUBJECT}' '${EMAIL_MESSAGE}'"
                        }
                    }
                }
            }

            stage('Deploy npp-service-proxy into E2E4') {
                steps {
                    script {
                        def isStartedByUser = currentBuild.rawBuild.getCause(hudson.model.Cause$UserIdCause) != null
                        def jobBuild = build job: 'npp-service-proxy/develop', parameters: [string(name: 'Docker_Image_Build',value: 'true'),
                         string(name: 'Artifactory_Publish',value:'true'),
                         booleanParam(name: 'Email_Notification',value:false),
                         string(name: 'Deploy_E2E4',value:'true')], propagate: false

                        jobResult_Proxy = jobBuild.getResult()
                        if (jobResult_Proxy != 'SUCCESS') {
                            EMAIL_SUBJECT = "Auto Deploy - npp-service-proxy Fail to deploy to ..${environmentName} :("
                        } else{
                            EMAIL_SUBJECT = "Auto Deploy - npp-service-proxy Successfully build and deploy to ..${environmentName} :)"
                        }
                        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-key', url: 'https://github.service.anz/WDCD/wdcd-platform.git']]]

                        EMAIL_RECIPIENTS="WDCD – NPP Squad <WDCD-NPP@anz.com>"
                        EMAIL_MESSAGE=EMAIL_SUBJECT

                        sh "python common/src/main/resources/email_utility.py 'applicationrelay.anz.com' 25 'WDCD_PLATFORM_DO_NOT_REPLY@anz.com' '${EMAIL_RECIPIENTS}' '${EMAIL_SUBJECT}' '${EMAIL_MESSAGE}'"

                    }
                }
            }

            stage('Deploy payid-backend into E2E4') {
                steps {
                    script {
                        def isStartedByUser = currentBuild.rawBuild.getCause(hudson.model.Cause$UserIdCause) != null
                        def jobBuild = build job: 'payid-backend/develop', parameters: [string(name: 'Docker_Image_Build',value: 'true'),
                         string(name: 'Artifactory_Publish',value:'true'),
                         booleanParam(name: 'Email_Notification',value:false),
                         string(name: 'Deploy_E2E4',value:'true')], propagate: false

                        jobResult_Bff = jobBuild.getResult()
                        if (jobResult_Bff != 'SUCCESS') {
                            EMAIL_SUBJECT = "Auto Deploy - payid-backend Fail to deploy to ..${environmentName} :("
                        } else{
                            EMAIL_SUBJECT = "Auto Deploy - payid-backend Successfully build and deploy to ..${environmentName} :)"
                        }
                        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-key', url: 'https://github.service.anz/WDCD/wdcd-platform.git']]]

                        EMAIL_RECIPIENTS="WDCD – NPP Squad <WDCD-NPP@anz.com>"
                        EMAIL_MESSAGE=EMAIL_SUBJECT

                        withCredentials([usernamePassword(credentialsId: 'Email_Notifications', passwordVariable: 'EMAIL_PASSWORD', usernameVariable: 'EMAIL_USERNAME')]) {
                            sh "python common/src/main/resources/email_utility.py 'applicationrelay.anz.com' 25 'WDCD_PLATFORM_DO_NOT_REPLY@anz.com' '${EMAIL_RECIPIENTS}' '${EMAIL_SUBJECT}' '${EMAIL_MESSAGE}'"
                        }
                    }
                }
            }

            stage('Deploy payid-crud-service into E2E4') {
                steps {
                    script {
                        def isStartedByUser = currentBuild.rawBuild.getCause(hudson.model.Cause$UserIdCause) != null
                        def jobBuild = build job: 'payid-crud-service/develop', parameters: [string(name: 'Docker_Image_Build',value: 'true'),
                         string(name: 'Artifactory_Publish',value:'true'),
                         booleanParam(name: 'Email_Notification',value:false),
                         string(name: 'Deploy_E2E4',value:'true')], propagate: false

                        jobResult_Crud = jobBuild.getResult()
                        if (jobResult_Crud != 'SUCCESS') {
                            EMAIL_SUBJECT = "Auto Deploy - payid-crud-service Fail to deploy to ..${environmentName} :("
                        } else{
                            EMAIL_SUBJECT = "Auto Deploy - payid-crud-service Successfully build and deploy to ..${environmentName} :)"
                        }
                        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-key', url: 'https://github.service.anz/WDCD/wdcd-platform.git']]]

                        EMAIL_RECIPIENTS="WDCD – NPP Squad <WDCD-NPP@anz.com>"
                        EMAIL_MESSAGE=EMAIL_SUBJECT

                        withCredentials([usernamePassword(credentialsId: 'Email_Notifications', passwordVariable: 'EMAIL_PASSWORD', usernameVariable: 'EMAIL_USERNAME')]) {
                            sh "python common/src/main/resources/email_utility.py 'applicationrelay.anz.com' 25 'WDCD_PLATFORM_DO_NOT_REPLY@anz.com' '${EMAIL_RECIPIENTS}' '${EMAIL_SUBJECT}' '${EMAIL_MESSAGE}'"
                        }
                    }
                }
            }



    }

}